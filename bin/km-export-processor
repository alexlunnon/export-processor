#!/usr/bin/env ruby

require 'thor'
require 'km-export-processor'

class CLI < Thor
  desc "json_to_json [JSONFILE]", "Processes a non-standard KM JSON file, into a standard format"
  def json_to_json(jsonfile)
    puts "Processing nonstandard JSON file into standard format"
    KMExport.json_to_json(jsonfile)
  end

  desc "json_compiler", "Compiles all KISSmetrics JSON files located in current directory, into a single (nonstandard) file"
  def json_compiler
    KMExport.json_compiler
  end


  desc "json_to_csv [JSONFILE]", "Takes a KISSmetrics JSON file as input, and converts it to CSV"
  def json_to_csv(jsonfile)
    puts "Converting file #{jsonfile} to CSV"
    KMExport.json_to_csv(jsonfile)
  end

  desc "parse_aliases [JSONFILE]", "Takes KISSmetrics JSON as input, and separates the alias calls into their own JSON file"
  def parse_aliases(jsonfile)
    puts "Parsing aliases out of #{jsonfile} and into their own JSON file"
    KMExport.alias_parser(jsonfile)
  end

  desc "parse_identity [JSONFILE] [IDENTITY]", "Takes KISSmetrics JSON as an input, and separates any actions taken by the provided identity into their own file" 
  def parse_identity(jsonfile, identity)
    puts "Parsing any actions done by #{identity} in #{jsonfile} into their own file"
    KMExport.identity_parser(jsonfile, identity)
  end

  desc "reimport [JSONFILE] [APIKEY] [OFFSET]", "Takes KISSmetrics JSON, and a KM API key as input, and sends the data to KISSmetrics"
  def reimport(jsonfile, apikey, offset=0)
    puts "Sending data from #{jsonfile} to KISSmetrics product with key: #{apikey}"
    reimporter = KMExport::Reimporter.new
    reimporter.send_to_KM(jsonfile, apikey, offset.to_i)
  end
end

CLI.start(ARGV)